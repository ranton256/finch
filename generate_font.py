#!/usr/bin/env python3
"""
Generate bitmap font data from TrueType font for Finch graphics library.

This script:
1. Loads a TTF font file
2. Renders each printable ASCII character (32-126)
3. Converts to monochrome bitmap data
4. Outputs C source code for font.c

Usage:
    python3 generate_font.py PressStart2P.ttf 8 > font_new.c
"""

import sys
from PIL import Image, ImageDraw, ImageFont
import os

def render_char_to_bitmap(font, char, char_width, char_height):
    """
    Render a single character to a monochrome bitmap.
    Returns a list of bytes, one per row.
    """
    # Create an image with enough space
    img = Image.new('L', (char_width, char_height), color=0)
    draw = ImageDraw.Draw(img)

    # Draw the character
    # Center it in the available space
    draw.text((0, 0), char, font=font, fill=255)

    # Convert to bitmap data (one byte per row)
    bitmap_data = []
    for y in range(char_height):
        row_byte = 0
        for x in range(min(char_width, 8)):  # Max 8 bits per byte
            pixel = img.getpixel((x, y))
            # Threshold: > 127 is "on"
            if pixel > 127:
                row_byte |= (1 << (7 - x))
        bitmap_data.append(row_byte)

    return bitmap_data

def generate_font_data(font_path, font_size, char_width, char_height):
    """
    Generate complete font data for ASCII 32-126.
    """
    # Load the font
    try:
        font = ImageFont.truetype(font_path, font_size)
    except Exception as e:
        print(f"Error loading font: {e}", file=sys.stderr)
        sys.exit(1)

    # Generate data for all printable ASCII characters
    font_data = []
    for char_code in range(32, 127):
        char = chr(char_code)
        bitmap = render_char_to_bitmap(font, char, char_width, char_height)
        font_data.append((char_code, char, bitmap))

    return font_data

def output_c_code(font_data, char_width, char_height, font_name):
    """
    Output C source code for the font data.
    """
    print("/**")
    print(f" * {font_name} Bitmap Font Data")
    print(" * Generated by generate_font.py")
    print(" *")
    print(f" * Character size: {char_width}x{char_height} pixels")
    print(" * Character range: ASCII 32-126 (95 characters)")
    print(" * Format: One byte per row, MSB is leftmost pixel")
    print(" * License: OFL (SIL Open Font License)")
    print(" */")
    print()
    print('#include "font.h"')
    print()
    print(f"// {font_name} {char_width}x{char_height} bitmap font")
    print(f"const uint8_t font{char_width}x{char_height}_basic[FONT_NUM_CHARS][FONT_CHAR_HEIGHT] = {{")

    for i, (char_code, char, bitmap) in enumerate(font_data):
        # Escape special characters for comment
        if char == '\\':
            char_display = '\\\\'
        elif char == '\'':
            char_display = '\\\''
        elif char == '"':
            char_display = '\\"'
        else:
            char_display = char

        print(f"    {{ // {char_code:3d} '{char_display}'")

        for row_idx, byte_val in enumerate(bitmap):
            comma = "," if row_idx < len(bitmap) - 1 else ""
            # Show binary representation as comment
            binary = format(byte_val, '08b').replace('0', '.').replace('1', '#')
            print(f"        0x{byte_val:02X}{comma}  // {binary}")

        comma = "," if i < len(font_data) - 1 else ""
        print(f"    }}{comma}")

    print("};")

def main():
    if len(sys.argv) < 3:
        print("Usage: python3 generate_font.py <font.ttf> <font_size> [width] [height]", file=sys.stderr)
        print("Example: python3 generate_font.py PressStart2P.ttf 8", file=sys.stderr)
        sys.exit(1)

    font_path = sys.argv[1]
    font_size = int(sys.argv[2])

    # Default to 8x8 for compatibility
    char_width = int(sys.argv[3]) if len(sys.argv) > 3 else 8
    char_height = int(sys.argv[4]) if len(sys.argv) > 4 else 8

    if not os.path.exists(font_path):
        print(f"Error: Font file '{font_path}' not found", file=sys.stderr)
        sys.exit(1)

    # Extract font name from path
    font_name = os.path.splitext(os.path.basename(font_path))[0]

    print(f"Generating bitmap font data from {font_path}...", file=sys.stderr)
    print(f"Font size: {font_size}pt, Character size: {char_width}x{char_height}", file=sys.stderr)

    font_data = generate_font_data(font_path, font_size, char_width, char_height)
    output_c_code(font_data, char_width, char_height, font_name)

    print(f"Successfully generated font data for {len(font_data)} characters", file=sys.stderr)

if __name__ == "__main__":
    main()
